# Generated by Django for PostgreSQL full-text search

from django.db import migrations
from django.contrib.postgres.indexes import GinIndex


class Migration(migrations.Migration):

    dependencies = [
        ('apps', '0002_enable_postgres_extensions'),
    ]

    # Allow migration to run outside transaction for CONCURRENTLY operations
    atomic = False

    operations = [
        # Remove old GIN indexes if they exist (without CONCURRENTLY)
        migrations.RunSQL(
            "DROP INDEX IF EXISTS apps_name_gin_idx;",
            reverse_sql="-- No reverse operation needed"
        ),
        migrations.RunSQL(
            "DROP INDEX IF EXISTS apps_description_gin_idx;",
            reverse_sql="-- No reverse operation needed"
        ),
        
        # Add new GIN indexes with trigram operator classes (without CONCURRENTLY for migration)
        migrations.RunSQL(
            """
            CREATE INDEX IF NOT EXISTS apps_name_gin_idx 
            ON apps USING GIN (name gin_trgm_ops);
            """,
            reverse_sql="DROP INDEX IF EXISTS apps_name_gin_idx;"
        ),
        migrations.RunSQL(
            """
            CREATE INDEX IF NOT EXISTS apps_description_gin_idx 
            ON apps USING GIN (description gin_trgm_ops);
            """,
            reverse_sql="DROP INDEX IF EXISTS apps_description_gin_idx;"
        ),
        
        # Add full-text search vector index (without CONCURRENTLY for migration)
        migrations.RunSQL(
            """
            CREATE INDEX IF NOT EXISTS apps_fulltext_search_idx 
            ON apps USING GIN (
                to_tsvector('english', 
                    COALESCE(name, '') || ' ' || 
                    COALESCE(developer, '') || ' ' || 
                    COALESCE(category, '') || ' ' || 
                    COALESCE(description, '')
                )
            );
            """,
            reverse_sql="DROP INDEX IF EXISTS apps_fulltext_search_idx;"
        ),
    ]
